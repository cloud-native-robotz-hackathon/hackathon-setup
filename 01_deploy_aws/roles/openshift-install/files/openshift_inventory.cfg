# Create an OSEv3 group that contains the masters and nodes groups
[OSEv3:children]
masters
nodes
{% if install_gluster %}
glusterfs
{% endif %}

# Set variables common for all OSEv3 hosts
[OSEv3:vars]

# SSH user, this user should allow ssh based auth without requiring a password
ansible_ssh_user=ec2-user

# If ansible_ssh_user is not root, ansible_become must be set to true
ansible_become=true

deployment_type={{deployment_type}}
# Enable ntp
openshift_clock_enabled=true
# Network plugin
os_sdn_network_plugin_name='{{os_sdn_network_plugin_name}}'

# Enable cockpit
osm_use_cockpit=true
# Set cockpit plugins
osm_cockpit_plugins=['cockpit-kubernetes','cockpit-dashboard']

# OpenShift 3.11 now requires an authenticated user/password for the registry
oreg_auth_user={{oreg_auth_user}}
oreg_auth_password={{oreg_auth_password}}

# Docker storage
container_runtime_docker_storage_type=overlay2
container_runtime_docker_storage_setup_device=/dev/xvdb

{% if install_gluster %}
# Install CNS
openshift_storage_glusterfs_namespace=glusterfs
openshift_storage_glusterfs_name=storage
openshift_storage_glusterfs_storageclass_default=true
openshift_storage_glusterfs_block_storageclass=true
openshift_storage_glusterfs_block_host_vol_size={{gluster_block_host_volume_size}}
openshift_storage_glusterfs_heketi_wipe=true
openshift_storage_glusterfs_wipe=true

# Automatically deploy the registry using glusterfs
openshift_hosted_manage_registry=true
openshift_hosted_registry_storage_kind=glusterfs
openshift_hosted_registry_storage_volume_size={{registry_volume_size}}Gi
# openshift_hosted_registry_selector='region=infra'

# Don't set AWS as default storage provider when using gluster
openshift_storageclass_default=false
{% endif %}

openshift_master_dynamic_provisioning_enabled=true
dynamic_volumes_check=False

# Set cloud provider to AWS
openshift_cloudprovider_kind=aws
openshift_clusterid={{namespace}}
openshift_cloudprovider_aws_access_key={{ lookup('env','AWS_ACCESS_KEY_ID') }}
openshift_cloudprovider_aws_secret_key={{ lookup('env','AWS_SECRET_ACCESS_KEY') }}
openshift_storageclass_parameters={'type': 'gp2', 'encrypted': 'false', 'zone': '{{availability_zone}}'}

# We need a wildcard DNS setup for our public access to services
openshift_master_default_subdomain={{public_subdomain_prefix}}.{{public_dns_zone}}

# Comment the following to enable htpasswd authentication; defaults to DenyAllPasswordIdentityProvider
openshift_master_identity_providers=[{'name': 'htpasswd_auth', 'login': 'true', 'challenge': 'true', 'kind': 'HTPasswdPasswordIdentityProvider'}]

{% if install_metrics %}
# Metrics, see: https://docs.openshift.com/enterprise/latest/install_config/cluster_metrics.html
openshift_metrics_install_metrics=true
openshift_metrics_cassandra_storage_type=dynamic
openshift_metrics_cassandra_pvc_size={{metrics_volume_size}}Gi
openshift_metrics_hawkular_nodeselector={'node-role.kubernetes.io/infra':'true'}
openshift_metrics_heapster_nodeselector={'node-role.kubernetes.io/infra':'true'}
openshift_metrics_cassandra_nodeselector={'node-role.kubernetes.io/infra':'true'}
{% if install_gluster %}
openshift_metrics_cassandra_pvc_storage_class_name=glusterfs-storage-block
{% endif %}
{% endif %}

{% if install_logging %}
# Logging, see: https://docs.openshift.com/enterprise/latest/install_config/aggregate_logging.html
openshift_logging_install_logging=true
openshift_logging_es_pvc_dynamic=true
openshift_logging_es_pvc_size={{logging_volume_size}}Gi
openshift_logging_curator_nodeselector={'node-role.kubernetes.io/infra':'true'}
openshift_logging_es_nodeselector={'node-role.kubernetes.io/infra':'true'}
openshift_logging_kibana_nodeselector={'node-role.kubernetes.io/infra':'true'}
openshift_logging_es_memory_limit=4G
{% if install_gluster %}
openshift_logging_es_pvc_storage_class_name=glusterfs-storage-block
{% endif %}
{% endif %}

openshift_cluster_monitoring_operator_install=true
{% if monitoring_storage_enabled %}
openshift_cluster_monitoring_operator_prometheus_storage_enabled={{monitoring_storage_enabled}}
openshift_cluster_monitoring_operator_prometheus_storage_capacity={{prometheus_volume_size}}Gi
openshift_cluster_monitoring_operator_alertmanager_storage_enabled={{monitoring_storage_enabled}}
openshift_cluster_monitoring_operator_alertmanager_storage_capacity={{alertmanager_volume_size}}Gi
{% endif %}

{% if master_ssl_key_file is defined and master_ssl_key_file is defined %}
openshift_master_named_certificates=[{"certfile":"/home/{{amazon_user}}/certs/{{public_master_dns}}/{{ master_ssl_cert_file | basename }}","keyfile":"/home/{{amazon_user}}/certs/{{public_master_dns}}/{{master_ssl_key_file | basename }}"}]
openshift_master_overwrite_named_certificates=true
{% endif %}

{% if wildcard_ssl_key_file is defined and wildcard_ssl_cert_file is defined and wildcard_ssl_fullchain_file is defined %}
openshift_hosted_router_certificate={"certfile":"/home/{{amazon_user}}/certs/{{public_subdomain_prefix}}.{{public_dns_zone}}/{{ wildcard_ssl_cert_file | basename }}","keyfile":"/home/{{amazon_user}}/certs/{{public_subdomain_prefix}}.{{public_dns_zone}}/{{wildcard_ssl_key_file | basename }}","cafile": "/home/{{amazon_user}}/certs/{{public_subdomain_prefix}}.{{public_dns_zone}}/{{ wildcard_ssl_fullchain_file | basename }}"}
{% endif %}

{% if disable_service_catalog %}
openshift_enable_service_catalog=false
{% endif %}

# Disable checks
openshift_disable_check=docker_storage,docker_storage_driver,memory_availability,package_version

# Create the masters host group
[masters]
{{master_private_dns_name}} openshift_public_hostname={{public_master_dns}} openshift_schedulable=true

# Host group for etcd
[etcd]
{{master_private_dns_name}}

[nodes]
{% if standalone_infra_node %}
{{master_private_dns_name}} openshift_node_group_name='node-config-master'
{{infra_private_dns_name}} openshift_node_group_name='node-config-infra'
{% else %}
{{master_private_dns_name}} openshift_node_group_name='node-config-master-infra'
{% endif %}

{% for node in nodes %}
{{node.private_dns_name}} openshift_node_group_name='node-config-compute'
{% endfor %}

{% if install_gluster %}
[glusterfs]
{% for node in nodes %}
{% if loop.index < 4 %}
{{node.private_dns_name}} glusterfs_ip={{node.private_ip}}  glusterfs_zone={{loop.index}} glusterfs_devices="[ '/dev/xvdc' ]"
{% endif %}
{% endfor %}
{% endif %}